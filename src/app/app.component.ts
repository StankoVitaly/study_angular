import {Component, OnDestroy, OnInit} from '@angular/core';import {Repositories, User} from './models/user';import {UserService} from './services/user.service';import {Subscription} from 'rxjs';@Component({  selector: 'app-root',  templateUrl: './app.component.html',  styleUrls: ['./app.component.css']})export class AppComponent implements OnInit, OnDestroy {  searchedList: User[] = [];  users: User[] = [];  followers: User[] = [];  repositories: Repositories[] = [];  s1: Subscription;  s2: Subscription;  isLoaded = false;  constructor(private userService: UserService) {  }  ngOnInit() {    this.getUserList();  }  getUserList() {    this.s1 = this.userService.getUsers().subscribe((data) => {      this.users = data;      this.searchedList = this.users;      data.sort((a, z) => {        if (a.login > z.login) {          return 1;        }        if (a.login < z.login) {          return -1;        }        return 0;      });    });  }  getSearchList(q: string) {    this.s2 = this.userService.getUserSearch(q).subscribe(data => {    });  }  updateUserFilter(value: string) {    this.getSearchList(value);    if (value !== '') {      this.searchedList = this.users.filter(val => val['login'].includes(value));      this.users = this.searchedList;      console.log(this.users);    }  }  showFollowersDetail(login: string) {    this.userService.getUserFollowers(login).subscribe(data => {      this.followers = data;    });    this.isLoaded = true;  }  showReposDetail(login: string) {    this.userService.getUserRepositories(login).subscribe(data => {      this.repositories = data;    });    this.isLoaded = true;  }  ngOnDestroy() {    if (this.s1 && this.s2) {      this.s1.unsubscribe();      this.s2.unsubscribe();    }  }}